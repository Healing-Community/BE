name: Build Multiple Services

on:
  push:
    branches:
      - main
      - dev

env:
  KEEP_TAGS_COUNT: 5  # Số lượng tags muốn giữ lại (không tính latest tag)
  IMAGE_PREFIX: "${{ secrets.DOCKER_USERNAME }}/"  # Prefix cho Docker image

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - { name: notification, dir: PRH_NotificationService }
          - { name: user, dir: PRH_UserService }
          - { name: report, dir: PRH_ReportService }
          - { name: quiz, dir: PRH_QuizService }
          - { name: group, dir: PRH_GroupService }
          - { name: payment, dir: PRH_PaymentService }
          - { name: chat, dir: PRH_ChatService }
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0'

    - name: Generate Docker tag
      id: docker_tag
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        SHORT_SHA=$(git rev-parse --short HEAD)
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        echo "TAG=${BRANCH_NAME}-${SHORT_SHA}-${TIMESTAMP}" >> $GITHUB_OUTPUT
        echo "Created tag: ${BRANCH_NAME}-${SHORT_SHA}-${TIMESTAMP}"

    - name: Build ${{ matrix.service.name }} Service
      working-directory: ./${{ matrix.service.dir }}
      run: dotnet build --configuration Release

    - name: Publish ${{ matrix.service.name }} Service
      working-directory: ./${{ matrix.service.dir }}
      run: dotnet publish --configuration Release --output ./publish

    - name: Upload ${{ matrix.service.name }} Service artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.service.name }}-service-publish
        path: ./${{ matrix.service.dir }}/publish

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and tag Docker images
      working-directory: ./${{ matrix.service.dir }}
      run: |
        docker build -t ${IMAGE_PREFIX}${{ matrix.service.name }}-service:${{ steps.docker_tag.outputs.TAG }} -f Dockerfile .
        docker tag ${IMAGE_PREFIX}${{ matrix.service.name }}-service:${{ steps.docker_tag.outputs.TAG }} ${IMAGE_PREFIX}${{ matrix.service.name }}-service:latest

    - name: Push Docker images
      run: |
        docker push ${IMAGE_PREFIX}${{ matrix.service.name }}-service:${{ steps.docker_tag.outputs.TAG }}
        docker push ${IMAGE_PREFIX}${{ matrix.service.name }}-service:latest

  cleanup-docker-tags:
    needs: build-and-publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - notification
          - user
          - report
          - quiz
          - group
          - payment
          - chat
    
    steps:
    - name: Log cleanup parameters
      run: |
        echo "Service: ${{ matrix.service }}-service"
        echo "Keeping $KEEP_TAGS_COUNT most recent tags (plus 'latest')"
        
    - name: Set up Docker Hub authentication
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        
    - name: Cleanup old tags
      run: |
        # Get list of all tags except 'latest'
        TAGS=$(curl -s -H "Authorization: JWT $(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.DOCKER_USERNAME }}'", "password": "'${{ secrets.DOCKER_PASSWORD }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)" \
          "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-service/tags/?page_size=100" \
          | jq -r '.results[].name' \
          | grep -v '^latest$' \
          | sort -r)
        
        # Convert to array
        IFS=$'\n' read -rd '' -a TAG_ARRAY <<<"$TAGS"
        
        # Keep count of tags to delete
        COUNT=0
        
        # Iterate through tags, skipping the configured number to keep
        for TAG in "${TAG_ARRAY[@]}"; do
          COUNT=$((COUNT + 1))
          if [ $COUNT -gt $KEEP_TAGS_COUNT ]; then
            echo "Deleting tag: $TAG"
            curl -X DELETE \
              -H "Authorization: JWT $(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.DOCKER_USERNAME }}'", "password": "'${{ secrets.DOCKER_PASSWORD }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)" \
              "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-service/tags/$TAG/"
          else
            echo "Keeping tag: $TAG"
          fi
        done

    - name: Log remaining tags
      run: |
        echo "Cleanup completed for ${{ matrix.service }}-service"
        echo "Remaining tags:"
        curl -s -H "Authorization: JWT $(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.DOCKER_USERNAME }}'", "password": "'${{ secrets.DOCKER_PASSWORD }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)" \
          "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-service/tags/?page_size=100" \
          | jq -r '.results[].name'
