name: Build Multiple Services

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - { name: notification, dir: PRH_NotificationService }
          - { name: user, dir: PRH_UserService }
          - { name: report, dir: PRH_ReportService }
          - { name: quiz, dir: PRH_QuizService }
          - { name: group, dir: PRH_GroupService }
          - { name: payment, dir: PRH_PaymentService }
          - { name: chat, dir: PRH_ChatService }
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Updated to v4

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v4 # Updated to v4
      with:
        dotnet-version: '8.0'
    - name: Install jq
      run: |
        if ! command -v jq &> /dev/null; then
          echo "jq not found. Installing jq..."
          sudo apt-get update
          sudo apt-get install -y jq
        else
          echo "jq is already installed."
        fi

    - name: Generate Docker tag
      id: docker_tag
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        SHORT_SHA=$(git rev-parse --short HEAD)
        echo "TAG=${BRANCH_NAME}-${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "Created tag: ${BRANCH_NAME}-${SHORT_SHA}"

    - name: Build ${{ matrix.service.name }} Service
      working-directory: ./${{ matrix.service.dir }}
      run: dotnet build --configuration Release

    - name: Publish ${{ matrix.service.name }} Service
      working-directory: ./${{ matrix.service.dir }}
      run: dotnet publish --configuration Release --output ./publish

    - name: Upload ${{ matrix.service.name }} Service artifacts
      uses: actions/upload-artifact@v4 # Updated to v4
      with:
        name: ${{ matrix.service.name }}-service-publish
        path: ./${{ matrix.service.dir }}/publish

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and tag Docker images
      working-directory: ./${{ matrix.service.dir }}
      run: |
        # Build with version tag
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service.name }}-service:${{ steps.docker_tag.outputs.TAG }} -f Dockerfile .
        # Tag as latest
        docker tag ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service.name }}-service:${{ steps.docker_tag.outputs.TAG }} ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service.name }}-service:latest

    - name: List Docker images
      run: docker images

    - name: Push Docker images
      run: |
        # Push version tag
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service.name }}-service:${{ steps.docker_tag.outputs.TAG }}
        # Push latest tag
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service.name }}-service:latest

    - name: Echo deployment info
      run: |
        echo "Service: ${{ matrix.service.name }}"
        echo "Version Tag: ${{ steps.docker_tag.outputs.TAG }}"
        echo "Docker Image: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service.name }}-service:${{ steps.docker_tag.outputs.TAG }}"

    - name: Cleanup old Docker images
      run: |
        REPO=${{ secrets.DOCKER_USERNAME }}/${{ matrix.service.name }}-service
        echo "Fetching tags for $REPO"

        # Fetch all tags, sort by creation time, and remove all except the 5 most recent
        tags=$(curl -s -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" \
          "https://hub.docker.com/v2/repositories/$REPO/tags/?page_size=100" | \
          jq -r '.results | sort_by(.last_updated) | .[:-5] | .[].name')

        # Delete tags older than the 5 most recent
        for tag in $tags; do
          echo "Deleting old tag: $tag"
          curl -s -X DELETE -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" \
            "https://hub.docker.com/v2/repositories/$REPO/tags/$tag/"
        done
