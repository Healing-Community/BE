// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ExpertDbContext))]
    [Migration("20241022145947_add-field")]
    partial class addfield
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Certificate", b =>
                {
                    b.Property<string>("CertificateId")
                        .HasColumnType("text");

                    b.Property<string>("CertificateTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpertProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("CertificateId");

                    b.HasIndex("CertificateTypeId");

                    b.HasIndex("ExpertProfileId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Domain.Entities.CertificateType", b =>
                {
                    b.Property<string>("CertificateTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CertificateTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CertificateTypes");
                });

            modelBuilder.Entity("Domain.Entities.ExpertProfile", b =>
                {
                    b.Property<string>("ExpertProfileId")
                        .HasColumnType("text");

                    b.Property<string>("BackIdCardUrl")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("integer");

                    b.Property<string>("ExpertiseAreas")
                        .HasColumnType("text");

                    b.Property<string>("FrontIdCardUrl")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ExpertProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ExpertProfiles");
                });

            modelBuilder.Entity("Domain.Entities.Certificate", b =>
                {
                    b.HasOne("Domain.Entities.CertificateType", "CertificateType")
                        .WithMany("Certificates")
                        .HasForeignKey("CertificateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ExpertProfile", "ExpertProfile")
                        .WithMany("Certificates")
                        .HasForeignKey("ExpertProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificateType");

                    b.Navigation("ExpertProfile");
                });

            modelBuilder.Entity("Domain.Entities.CertificateType", b =>
                {
                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("Domain.Entities.ExpertProfile", b =>
                {
                    b.Navigation("Certificates");
                });
#pragma warning restore 612, 618
        }
    }
}
